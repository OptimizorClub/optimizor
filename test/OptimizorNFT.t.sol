// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import {BaseTest, IChallenge, SQRT_ID, SUM_ID, ISqrt} from "test/BaseTest.sol";
import {computeKey} from "test/CommitHash.sol";
import {ExpensiveSqrt2, ExpensiveSqrt3} from "test/SqrtChallengeSolutions.sol";

import {packTokenId} from "src/DataHelpers.sol";
import {TokenDetails} from "src/TokenDetails.sol";
import {Base64} from "src/Base64.sol";

import {Optimizor} from "src/Optimizor.sol";
import {OptimizorNFT} from "src/OptimizorNFT.sol";

uint256 constant SALT = 0;

contract OptimizorTest is BaseTest {
    function run() external returns (string memory) {
        setUp();
        testCheapExpensiveSqrt();
        uint256 tokenId = (SQRT_ID << 32) | 2;
        return opt.tokenURI(tokenId);
    }

    function testNameAndSymbol() public {
        assertEq(opt.name(), "Optimizor Club");
        assertEq(opt.symbol(), "OC");
    }

    function testContractURI() public {
        string memory logo = string.concat(
            '<svg width="166.597" height="128.941" viewBox="0 0 44.079 34.116" xmlns="http://www.w3.org/2000/svg">'
            '<path d="M20.793 13.321h-.623V12.7h-6.225v.622h.622v.623h-.622v.622h-.623v-.622H12.7v6.225h.622v.623h.623v.622h6.225v-.622h.623v-.623h.622v-6.225h-.622zm-3.735 5.603v-4.358h1.867v4.358zm13.698-6.225h-6.848v.622h.623v.623h-.623v.622h-.622v-.622h-.623v6.225h.623v.623h.622v.622h6.848v-.622h.622v-1.245h-.622v-.623H27.02v-4.358h3.735v-.622h.622v-.623h-.622z" style="fill:#666"/>'
            "</svg>"
        );
        string memory expected = string.concat(
            "data:application/json;base64,",
            Base64.encode(
                bytes(
                    string.concat(
                        "{",
                        '"name":"Optimizor Club",',
                        '"description":"The Optimizor Club NFT collection rewards gas efficient people and machines by minting new items whenever a cheaper solution is submitted for a certain challenge.",',
                        '"image":"data:image/svg+xml;base64,',
                        Base64.encode(bytes(logo)),
                        '",',
                        '"external_link":"https://optimizor.club/"',
                        "}"
                    )
                )
            )
        );
        assertEq(opt.contractURI(), expected);
    }

    function testCheapSqrt() public {
        addSqrtChallenge();

        testChallenger(SQRT_ID, address(cheapSqrt), address(cheapSqrt).codehash);
    }

    function testExpensiveSqrt() public {
        addSqrtChallenge();

        testChallenger(SQRT_ID, address(expSqrt), address(expSqrt).codehash);
    }

    function testCheapExpensiveSqrt() public {
        addSqrtChallenge();

        testChallengers(
            SQRT_ID, address(expSqrt), address(expSqrt).codehash, address(cheapSqrt), address(cheapSqrt).codehash
        );
    }

    function testCheapSum() public {
        addSumChallenge();

        testChallenger(SUM_ID, address(cheapSum), address(cheapSum).codehash);
    }

    function testExpensiveSum() public {
        addSumChallenge();

        testChallenger(SUM_ID, address(expSum), address(expSum).codehash);
    }

    function testCheapExpensiveSum() public {
        addSumChallenge();

        testChallengers(
            SUM_ID, address(expSum), address(expSum).codehash, address(cheapSum), address(cheapSum).codehash
        );
    }

    function testCheapSqrtNFT() public {
        addSqrtChallenge();

        testChallenger(SQRT_ID, address(cheapSqrt), address(cheapSqrt).codehash);
    }

    function testChallengers(
        uint256 CHL_ID,
        address challenger_0,
        bytes32 chl_hash_0,
        address challenger_1,
        bytes32 chl_hash_1
    ) internal {
        address other = address(42);
        vm.prank(other);
        opt.commit(computeKey(other, chl_hash_0, SALT));
        vm.stopPrank();

        opt.commit(computeKey(address(this), chl_hash_1, SALT));

        advancePeriod();

        (, uint32 preSolutionId) = opt.challenges(CHL_ID);

        vm.prank(other);
        opt.challenge(CHL_ID, challenger_0, other, SALT);
        vm.stopPrank();

        (, uint32 postSolutionId) = opt.challenges(CHL_ID);
        (, address postOpt,) = opt.extraDetails(packTokenId(CHL_ID, postSolutionId));
        assertEq(postOpt, other);
        assertEq(postSolutionId, preSolutionId + 1);

        uint256 tokenId = (CHL_ID << 32) | postSolutionId;
        assertEq(opt.ownerOf(tokenId), other);

        address[] memory leaders = opt.leaderboard(tokenId);
        assertEq(leaders.length, 1);
        assertEq(leaders[0], other);

        opt.challenge(CHL_ID, challenger_1, address(this), SALT);
        (, uint32 postSolutionId2) = opt.challenges(CHL_ID);
        (, address postOpt2,) = opt.extraDetails(packTokenId(CHL_ID, postSolutionId2));
        assertEq(postOpt2, address(this));
        assertEq(postSolutionId2, postSolutionId + 1);

        uint256 tokenId2 = (CHL_ID << 32) | postSolutionId2;
        assertEq(opt.ownerOf(tokenId2), address(this));

        vm.prank(other);
        vm.expectRevert(Optimizor.NotOptimizor.selector);
        opt.challenge(CHL_ID, challenger_0, other, SALT);
        vm.stopPrank();

        address[] memory leaders2 = opt.leaderboard(tokenId2);
        assertEq(leaders2.length, 2);
        assertEq(leaders2[0], other);
        assertEq(leaders2[1], address(this));
    }

    function testChallenger(uint256 CHL_ID, address challenger, bytes32 chl_hash) internal {
        opt.commit(computeKey(address(this), chl_hash, SALT));
        advancePeriod();

        (, uint32 preSolutionId) = opt.challenges(CHL_ID);
        address[] memory preLeaders = opt.leaderboard((CHL_ID << 32) | preSolutionId);

        opt.challenge(CHL_ID, challenger, address(this), SALT);
        (, uint32 postSolutionId) = opt.challenges(CHL_ID);
        (, address postOpt,) = opt.extraDetails(packTokenId(CHL_ID, postSolutionId));
        assertEq(postOpt, address(this));
        assertEq(postSolutionId, preSolutionId + 1);

        uint256 tokenId = (CHL_ID << 32) | postSolutionId;
        assertEq(opt.ownerOf(tokenId), address(this));

        address[] memory leaders = opt.leaderboard(tokenId);
        assertEq(leaders.length, preLeaders.length + 1);
        assertEq(leaders[leaders.length - 1], address(this));
    }

    function testInvalidTokenURIs() public {
        addSumChallenge();
        vm.expectRevert(abi.encodeWithSelector(OptimizorNFT.InvalidSolutionId.selector, 0, 0));
        opt.tokenURI(0);
        vm.expectRevert(abi.encodeWithSelector(OptimizorNFT.InvalidSolutionId.selector, 0, 10));
        opt.tokenURI(10);
    }

    function testInvalidChallengeTokenURIs() public {
        vm.expectRevert(abi.encodeWithSelector(OptimizorNFT.ChallengeNotFound.selector, 100));
        opt.tokenURI((100 << 32) + 1);
    }

    function testTokenTransferDetailsAndURIs() public {
        addSqrtChallenge();

        testChallenger(SQRT_ID, address(expSqrt), address(expSqrt).codehash);

        testChallenger(SQRT_ID, address(cheapSqrt), address(cheapSqrt).codehash);

        uint256 tokenId = (SQRT_ID << 32) | 2;
        TokenDetails memory expectedTokenDetails = TokenDetails({
            challengeId: SQRT_ID,
            challenge: IChallenge(0xf5a2fE45F4f1308502b1C136b9EF8af136141382),
            leaderGas: 228756,
            leaderSolutionId: 2,
            leaderSolver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
            leaderOwner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
            leaderSubmission: 0x1DD17af470f2CAa13D29c02AC190a3a1EdDc4e84,
            gas: 228756,
            solutionId: 2,
            rank: 1,
            improvementPercentage: 50,
            solver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
            owner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
            submission: 0x1DD17af470f2CAa13D29c02AC190a3a1EdDc4e84
        });

        assertEq(abi.encode(opt.tokenDetails(tokenId)), abi.encode(expectedTokenDetails));

        address to = address(0xcafe);
        opt.transferFrom(address(this), to, tokenId);

        expectedTokenDetails.leaderOwner = to;
        expectedTokenDetails.owner = to;

        assertEq(abi.encode(opt.tokenDetails(tokenId)), abi.encode(expectedTokenDetails));

        assertEq(
            opt.tokenURI(tokenId),
            "data:application/json;base64,"
        );
    }

    function testTokenDetailsAndURIs() public {
        addSqrtChallenge();

        ISqrt expSqrt2 = new ExpensiveSqrt2();
        ISqrt expSqrt3 = new ExpensiveSqrt3();

        testChallenger(SQRT_ID, address(expSqrt3), address(expSqrt3).codehash);

        testChallenger(SQRT_ID, address(expSqrt2), address(expSqrt2).codehash);

        testChallenger(SQRT_ID, address(expSqrt), address(expSqrt).codehash);

        testChallenger(SQRT_ID, address(cheapSqrt), address(cheapSqrt).codehash);

        assertEq(
            abi.encode(opt.tokenDetails((SQRT_ID << 32) | 1)),
            abi.encode(
                TokenDetails({
                    challengeId: SQRT_ID,
                    challenge: IChallenge(0xf5a2fE45F4f1308502b1C136b9EF8af136141382),
                    leaderGas: 228756,
                    leaderSolutionId: 4,
                    leaderSolver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    leaderOwner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    leaderSubmission: 0x1DD17af470f2CAa13D29c02AC190a3a1EdDc4e84,
                    gas: 897069,
                    solutionId: 1,
                    rank: 4,
                    improvementPercentage: 0,
                    solver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    owner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    submission: 0xdC0505A4c93647CD736E4bE24FBb171472bBFb10
                })
            )
        );

        assertEq(
            abi.encode(opt.tokenDetails((SQRT_ID << 32) | 2)),
            abi.encode(
                TokenDetails({
                    challengeId: SQRT_ID,
                    challenge: IChallenge(0xf5a2fE45F4f1308502b1C136b9EF8af136141382),
                    leaderGas: 228756,
                    leaderSolutionId: 4,
                    leaderSolver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    leaderOwner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    leaderSubmission: 0x1DD17af470f2CAa13D29c02AC190a3a1EdDc4e84,
                    gas: 674298,
                    solutionId: 2,
                    rank: 3,
                    improvementPercentage: 75,
                    solver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    owner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    submission: 0xbfFb01bB2DDb4EfA87cB78EeCB8115AFAe6d2032
                })
            )
        );

        assertEq(
            abi.encode(opt.tokenDetails((SQRT_ID << 32) | 3)),
            abi.encode(
                TokenDetails({
                    challengeId: SQRT_ID,
                    challenge: IChallenge(0xf5a2fE45F4f1308502b1C136b9EF8af136141382),
                    leaderGas: 228756,
                    leaderSolutionId: 4,
                    leaderSolver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    leaderOwner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    leaderSubmission: 0x1DD17af470f2CAa13D29c02AC190a3a1EdDc4e84,
                    gas: 451527,
                    solutionId: 3,
                    rank: 2,
                    improvementPercentage: 66,
                    solver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    owner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    submission: 0x3A1148FE01e3c4721D93fe8A36c2b5C29109B6ae
                })
            )
        );

        assertEq(
            abi.encode(opt.tokenDetails((SQRT_ID << 32) | 4)),
            abi.encode(
                TokenDetails({
                    challengeId: SQRT_ID,
                    challenge: IChallenge(0xf5a2fE45F4f1308502b1C136b9EF8af136141382),
                    leaderGas: 228756,
                    leaderSolutionId: 4,
                    leaderSolver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    leaderOwner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    leaderSubmission: 0x1DD17af470f2CAa13D29c02AC190a3a1EdDc4e84,
                    gas: 228756,
                    solutionId: 4,
                    rank: 1,
                    improvementPercentage: 50,
                    solver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    owner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    submission: 0x1DD17af470f2CAa13D29c02AC190a3a1EdDc4e84
                })
            )
        );

        assertEq(
            opt.tokenURI((SQRT_ID << 32) | 1),
            "data:application/json;base64,"
        );
        assertEq(
            opt.tokenURI((SQRT_ID << 32) | 2),
            "data:application/json;base64,"
        );
        assertEq(
            opt.tokenURI((SQRT_ID << 32) | 3),
            "data:application/json;base64,"
        );
        assertEq(
            opt.tokenURI((SQRT_ID << 32) | 4),
            "data:application/json;base64,"
        );
    }
}
