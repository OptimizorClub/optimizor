// SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

import {BaseTest, IChallenge, SQRT_ID, SUM_ID, ISqrt} from "test/BaseTest.sol";
import {computeKey} from "test/CommitHash.sol";
import {ExpensiveSqrt2, ExpensiveSqrt3} from "test/SqrtChallengeSolutions.sol";

import {packTokenId} from "src/DataHelpers.sol";
import {TokenDetails} from "src/TokenDetails.sol";
import {Base64} from "src/Base64.sol";

import {Optimizor} from "src/Optimizor.sol";
import {OptimizorNFT} from "src/OptimizorNFT.sol";

uint256 constant SALT = 0;

contract OptimizorTest is BaseTest {
    function run() external returns (string memory) {
        setUp();
        testCheapExpensiveSqrt();
        uint256 tokenId = (SQRT_ID << 32) | 2;
        return opt.tokenURI(tokenId);
    }

    function testNameAndSymbol() public {
        assertEq(opt.name(), "Optimizor Club");
        assertEq(opt.symbol(), "OC");
    }

    function testContractURI() public {
        string memory logo = string.concat(
            '<svg width="308.531" height="112.033" viewBox="0 0 81.632 29.642" xmlns="http://www.w3.org/2000/svg">'
            '<path d="M13.092 5.623h-.622V5H6.244v.623h.623v.622h-.623v.623h-.622v-.623h-.623v6.226h.623v.622h.622v.623h6.226v-.623h.622v-.622h.623V6.245h-.623zm-3.735 5.603V6.868h1.868v4.358zM21.81 7.49v-.622h-.622v-.623h-5.603v.623h1.245v.622h-.623v.623h-.622V6.868h-.623v6.225h.623v.623h2.49v-.623h.622v-1.867h2.49v-.623h.623V9.98h.622V7.49zm-3.113.623h1.246V9.98h-1.246zm11.836-1.868h-6.225v.623h1.245v.622h-.623v.623h-.622v.622h1.245v4.358h.622v.623h2.49v-.623h.623V8.736h1.245v-.623h.623V6.868h-.623zm-6.225.623h-.623v1.245h.623zm11.213-.623h-2.49v.623h1.245v.622h-.623v.623h-.622V6.868h-.623v6.225h.623v.623h2.49v-.623h.622V6.868h-.622zm9.34 0h-1.246v.623h-.623v1.245h-.622v.622h-.623v-.622h-.622V6.868h-.623v-.623h-2.49v.623h1.245v.622h-.622v.623h-.623V6.868h-.623v6.225h.623v.623h2.49v-.623h.623v-2.49h.622v.623h.623v-.623h.622v2.49h.623v.623h1.245v-.623h.623V6.868h-.623zm4.984 0h-2.49v.623H48.6v.622h-.622v.623h-.623V6.868h-.622v6.225h.622v.623h2.49v-.623h.623V6.868h-.623zm8.717.623v-.623h-6.225v.623h1.245v.622h-.623v.623h-.622v.622h2.49v.623h-.623v.622h-.622v.623h-.623v.623h-.622v.622h-.623v1.245h.623v.623h6.225v-.623h.623v-1.867h-.623v-.623h-1.867V9.98h.622v-.622h.622v-.623h.623v-.622h.623V6.868zm-6.225 0h-.623v1.245h.623zm14.948 0h-.623v-.623h-4.98v.623h.623v.622h-.623v.623h-.622V7.49h-.623v4.98h.623v.623h.622v.623h4.98v-.623h.623v-.622h.622V7.49h-.622zm-1.245 4.358h-1.868V8.113h1.868zm9.968-4.358h-.623v-.623h-5.603v.623h1.245v.622h-.622v.623h-.623V6.868h-.622v6.225h.622v.623h2.49v-.623h.623v-1.867h.623v.622h.622v.623h.623v.622h.622v.623h.623v-.623h.622v-1.867h-.622v-.623h-.623V9.98h.623v-.622h.622V7.49h-.622zm-3.113 1.868v-.623h1.868v.622zm-40.187 7.19H25.86v.622h.622v.623h-.622v.622h-.623v-.622h-.622v6.225h.622v.623h.623v.622h6.848v-.622h.623v-1.245h-.623v-.623h-3.736v-4.358h3.736v-.622h.623v-.623h-.623zm8.095 6.225h-2.49v-4.358h-.623v-.622H35.2v.622h1.246v.623h-.623v.622H35.2v-1.245h-.622v6.226h.622v.622h5.603v-.622h.623v-1.245h-.623zm8.725-4.98h-1.245v.622h-.622v4.358h-1.245v-4.358h-.623v-.622h-2.49v.622h1.245v.623h-.622v.623h-.623v-1.246h-.622v5.603h.622v.623h.623v.622h4.98v-.622h.622v-.623h.623v-5.603h-.623zm8.723.622h-.622v-.622h-5.603v.622h1.245v.623h-.623v.623h-.622v-1.246h-.622v6.226h.622v.622h5.603v-.622h.622v-.623h.623v-2.49h-.623v-.622h.623v-1.868h-.623zm-1.245 4.358H55.14v-.622h1.867zm-1.867-2.49v-.622h1.867v.622z" style="fill:#666"/>'
            "</svg>"
        );
        string memory expected = string.concat(
            "data:application/json;base64,",
            Base64.encode(
                bytes(
                    string.concat(
                        "{",
                        '"name":"Optimizor Club"',
                        '"description":"The Optimizor Club NFT collection rewards gas efficient people and machines by minting new items whenever a cheaper solution is submitted for a certain challenge."',
                        '"image":"',
                        logo,
                        '"',
                        '"external_link":"https://optimizor.club/"',
                        "}"
                    )
                )
            )
        );
        assertEq(opt.contractURI(), expected);
    }

    function testCheapSqrt() public {
        addSqrtChallenge();

        testChallenger(SQRT_ID, address(cheapSqrt), address(cheapSqrt).codehash);
    }

    function testExpensiveSqrt() public {
        addSqrtChallenge();

        testChallenger(SQRT_ID, address(expSqrt), address(expSqrt).codehash);
    }

    function testCheapExpensiveSqrt() public {
        addSqrtChallenge();

        testChallengers(
            SQRT_ID, address(expSqrt), address(expSqrt).codehash, address(cheapSqrt), address(cheapSqrt).codehash
        );
    }

    function testCheapSum() public {
        addSumChallenge();

        testChallenger(SUM_ID, address(cheapSum), address(cheapSum).codehash);
    }

    function testExpensiveSum() public {
        addSumChallenge();

        testChallenger(SUM_ID, address(expSum), address(expSum).codehash);
    }

    function testCheapExpensiveSum() public {
        addSumChallenge();

        testChallengers(
            SUM_ID, address(expSum), address(expSum).codehash, address(cheapSum), address(cheapSum).codehash
        );
    }

    function testCheapSqrtNFT() public {
        addSqrtChallenge();

        testChallenger(SQRT_ID, address(cheapSqrt), address(cheapSqrt).codehash);
    }

    function testChallengers(
        uint256 CHL_ID,
        address challenger_0,
        bytes32 chl_hash_0,
        address challenger_1,
        bytes32 chl_hash_1
    ) internal {
        address other = address(42);
        vm.prank(other);
        opt.commit(computeKey(other, chl_hash_0, SALT));
        vm.stopPrank();

        opt.commit(computeKey(address(this), chl_hash_1, SALT));

        advancePeriod();

        (, uint32 preSolutionId) = opt.challenges(CHL_ID);

        vm.prank(other);
        opt.challenge(CHL_ID, challenger_0, other, SALT);
        vm.stopPrank();

        (, uint32 postSolutionId) = opt.challenges(CHL_ID);
        (, address postOpt,) = opt.extraDetails(packTokenId(CHL_ID, postSolutionId));
        assertEq(postOpt, other);
        assertEq(postSolutionId, preSolutionId + 1);

        uint256 tokenId = (CHL_ID << 32) | postSolutionId;
        assertEq(opt.ownerOf(tokenId), other);

        address[] memory leaders = opt.leaderboard(tokenId);
        assertEq(leaders.length, 1);
        assertEq(leaders[0], other);

        opt.challenge(CHL_ID, challenger_1, address(this), SALT);
        (, uint32 postSolutionId2) = opt.challenges(CHL_ID);
        (, address postOpt2,) = opt.extraDetails(packTokenId(CHL_ID, postSolutionId2));
        assertEq(postOpt2, address(this));
        assertEq(postSolutionId2, postSolutionId + 1);

        uint256 tokenId2 = (CHL_ID << 32) | postSolutionId2;
        assertEq(opt.ownerOf(tokenId2), address(this));

        vm.prank(other);
        vm.expectRevert(Optimizor.NotOptimizor.selector);
        opt.challenge(CHL_ID, challenger_0, other, SALT);
        vm.stopPrank();

        address[] memory leaders2 = opt.leaderboard(tokenId2);
        assertEq(leaders2.length, 2);
        assertEq(leaders2[0], other);
        assertEq(leaders2[1], address(this));
    }

    // TODO make this function public too to fuzz it
    function testChallenger(uint256 CHL_ID, address challenger, bytes32 chl_hash) internal {
        opt.commit(computeKey(address(this), chl_hash, SALT));
        advancePeriod();

        (, uint32 preSolutionId) = opt.challenges(CHL_ID);
        address[] memory preLeaders = opt.leaderboard((CHL_ID << 32) | preSolutionId);

        opt.challenge(CHL_ID, challenger, address(this), SALT);
        (, uint32 postSolutionId) = opt.challenges(CHL_ID);
        (, address postOpt,) = opt.extraDetails(packTokenId(CHL_ID, postSolutionId));
        assertEq(postOpt, address(this));
        assertEq(postSolutionId, preSolutionId + 1);

        uint256 tokenId = (CHL_ID << 32) | postSolutionId;
        assertEq(opt.ownerOf(tokenId), address(this));

        address[] memory leaders = opt.leaderboard(tokenId);
        assertEq(leaders.length, preLeaders.length + 1);
        assertEq(leaders[leaders.length - 1], address(this));
    }

    function testInvalidTokenURIs() public {
        addSumChallenge();
        vm.expectRevert(abi.encodeWithSelector(OptimizorNFT.InvalidSolutionId.selector, 0, 0));
        opt.tokenURI(0);
        vm.expectRevert(abi.encodeWithSelector(OptimizorNFT.InvalidSolutionId.selector, 0, 10));
        opt.tokenURI(10);
    }

    function testInvalidChallengeTokenURIs() public {
        vm.expectRevert(abi.encodeWithSelector(OptimizorNFT.ChallengeNotFound.selector, 100));
        opt.tokenURI((100 << 32) + 1);
    }

    function testTokenDetailsAndURIs() public {
        addSqrtChallenge();

        ISqrt expSqrt2 = new ExpensiveSqrt2();
        ISqrt expSqrt3 = new ExpensiveSqrt3();

        testChallenger(SQRT_ID, address(expSqrt3), address(expSqrt3).codehash);

        testChallenger(SQRT_ID, address(expSqrt2), address(expSqrt2).codehash);

        testChallenger(SQRT_ID, address(expSqrt), address(expSqrt).codehash);

        testChallenger(SQRT_ID, address(cheapSqrt), address(cheapSqrt).codehash);

        assertEq(
            abi.encode(opt.tokenDetails((SQRT_ID << 32) | 1)),
            abi.encode(
                TokenDetails({
                    challengeId: SQRT_ID,
                    challenge: IChallenge(0xf5a2fE45F4f1308502b1C136b9EF8af136141382),
                    leaderGas: 134857,
                    leaderSolutionId: 4,
                    leaderSolver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    leaderOwner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    leaderSubmission: 0x1DD17af470f2CAa13D29c02AC190a3a1EdDc4e84,
                    gas: 525931,
                    solutionId: 1,
                    rank: 4,
                    improvementPercentage: 0,
                    solver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    owner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    submission: 0xdC0505A4c93647CD736E4bE24FBb171472bBFb10
                })
            )
        );

        assertEq(
            abi.encode(opt.tokenDetails((SQRT_ID << 32) | 2)),
            abi.encode(
                TokenDetails({
                    challengeId: SQRT_ID,
                    challenge: IChallenge(0xf5a2fE45F4f1308502b1C136b9EF8af136141382),
                    leaderGas: 134857,
                    leaderSolutionId: 4,
                    leaderSolver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    leaderOwner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    leaderSubmission: 0x1DD17af470f2CAa13D29c02AC190a3a1EdDc4e84,
                    gas: 395573,
                    solutionId: 2,
                    rank: 3,
                    improvementPercentage: 75,
                    solver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    owner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    submission: 0xbfFb01bB2DDb4EfA87cB78EeCB8115AFAe6d2032
                })
            )
        );

        assertEq(
            abi.encode(opt.tokenDetails((SQRT_ID << 32) | 3)),
            abi.encode(
                TokenDetails({
                    challengeId: SQRT_ID,
                    challenge: IChallenge(0xf5a2fE45F4f1308502b1C136b9EF8af136141382),
                    leaderGas: 134857,
                    leaderSolutionId: 4,
                    leaderSolver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    leaderOwner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    leaderSubmission: 0x1DD17af470f2CAa13D29c02AC190a3a1EdDc4e84,
                    gas: 265215,
                    solutionId: 3,
                    rank: 2,
                    improvementPercentage: 67,
                    solver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    owner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    submission: 0x3A1148FE01e3c4721D93fe8A36c2b5C29109B6ae
                })
            )
        );

        assertEq(
            abi.encode(opt.tokenDetails((SQRT_ID << 32) | 4)),
            abi.encode(
                TokenDetails({
                    challengeId: SQRT_ID,
                    challenge: IChallenge(0xf5a2fE45F4f1308502b1C136b9EF8af136141382),
                    leaderGas: 134857,
                    leaderSolutionId: 4,
                    leaderSolver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    leaderOwner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    leaderSubmission: 0x1DD17af470f2CAa13D29c02AC190a3a1EdDc4e84,
                    gas: 134857,
                    solutionId: 4,
                    rank: 1,
                    improvementPercentage: 50,
                    solver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    owner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
                    submission: 0x1DD17af470f2CAa13D29c02AC190a3a1EdDc4e84
                })
            )
        );

        assertEq(
            opt.tokenURI((SQRT_ID << 32) | 1),
            "data:application/json;base64,"
        );
        assertEq(
            opt.tokenURI((SQRT_ID << 32) | 2),
            "data:application/json;base64,"
        );
        assertEq(
            opt.tokenURI((SQRT_ID << 32) | 3),
            "data:application/json;base64,"
        );
        assertEq(
            opt.tokenURI((SQRT_ID << 32) | 4),
            "data:application/json;base64,"
        );
    }
}
