// SPDX-License-Identifier: MIT 
pragma solidity ^0.8.15;

import "./BaseTest.sol";
import "../src/OptimizorNFT.sol";
import "../src/DataHelpers.sol";
import "../src/Base64.sol";
import "./CommitHash.sol";

uint constant SALT = 0;

contract OptimizorTest is BaseTest {
    function run() external returns (string memory) {
        setUp();
        testCheapExpensiveSqrt();
        uint tokenId = (SQRT_ID << 32) | 2;
        return opt.tokenURI(tokenId);
    }

    function testNameAndSymbol() public {
        assertEq(opt.name(), "Optimizor Club");
        assertEq(opt.symbol(), "OC");
    }

    function testContractURI() public {
        string memory logo = string.concat(
            '<svg width="308.531" height="112.033" viewBox="0 0 81.632 29.642" xmlns="http://www.w3.org/2000/svg">',
            '<path d="M158.233 208.68h-2.353v-2.352h-23.53v2.352h2.353v2.353h-2.353v2.353h-2.353v-2.353h-2.352v23.53h2.352v2.353h2.353v2.353h23.53v-2.353h2.353v-2.353h2.353v-23.53h-2.353zm-14.118 21.177v-16.47h7.059v16.47zm47.068-14.117v-2.354h-2.353v-2.353h-21.176v2.353h4.706v2.353h-2.353v2.353h-2.353v-4.706H165.3v23.53h2.353v2.353h9.411v-2.353h2.353v-7.059h9.412v-2.353h2.353v-2.353h2.353v-9.412zm-11.765 2.352h4.706v7.06h-4.706zm44.734-7.059h-23.53v2.353h4.706v2.353h-2.353v2.353h-2.353v2.353h4.706v16.47h2.353v2.354h9.412v-2.353h2.353v-16.47h4.706v-2.354h2.353v-4.706h-2.353zm-23.53 2.353h-2.352v4.706h2.352zm42.381-2.353h-9.412v2.353h4.706v2.353h-2.353v2.353h-2.353v-4.706h-2.353v23.53h2.353v2.353h9.412v-2.353h2.353v-23.53h-2.353zm35.299 0h-4.706v2.353h-2.353v4.706h-2.353v2.353h-2.353v-2.353h-2.353v-4.706h-2.353v-2.353h-9.412v2.353h4.706v2.353h-2.353v2.353h-2.353v-4.706h-2.353v23.53h2.353v2.353h9.412v-2.353h2.353v-9.412h2.353v2.353h2.353v-2.353h2.353v9.412h2.353v2.353h4.706v-2.353h2.353v-23.53h-2.353zm18.842 0h-9.412v2.353h4.706v2.353h-2.353v2.353h-2.353v-4.706h-2.353v23.53h2.353v2.353h9.412v-2.353h2.353v-23.53h-2.353zm32.946 2.353v-2.353h-23.53v2.353h4.706v2.353h-2.353v2.353h-2.353v2.353h9.412v2.353h-2.353v2.353h-2.353v2.353h-2.353v2.353h-2.353v2.353h-2.353v4.706h2.353v2.353h23.53v-2.353h2.352v-7.059h-2.353v-2.353h-7.058v-2.353h2.352v-2.353h2.353v-2.353h2.353v-2.353h2.353v-4.706zm-23.53 0h-2.353v4.706h2.353zm56.498 0h-2.353v-2.353h-18.823v2.353h2.353v2.353h-2.353v2.353h-2.353v-2.353h-2.353v18.824h2.353v2.353h2.353v2.353h18.823v-2.353h2.353v-2.353h2.353v-18.824h-2.353zm-4.706 16.471h-7.059v-11.765h7.06zm37.675-16.471h-2.353v-2.353h-21.177v2.353h4.706v2.353h-2.353v2.353h-2.353v-4.706h-2.352v23.53h2.352v2.353h9.412v-2.353h2.353v-7.059h2.353v2.353h2.353v2.353h2.353v2.353h2.353v2.353h2.353v-2.353h2.353v-7.059h-2.353v-2.353h-2.353v-2.353h2.353v-2.353h2.353v-7.059h-2.353zm-11.765 7.06v-2.354h7.059v2.353z" style="fill:#4d4d4d" transform="translate(-28.773 -49.59) scale(.26458)"/>',
            '<path d="M193.899 405.302h-25.883v2.353h2.353v2.353h-2.353v2.353h-2.353v-2.353h-2.352v23.53h2.352v2.352h2.353v2.353H193.9v-2.353h2.353v-4.705H193.9v-2.353h-14.12V412.36h14.12v-2.353h2.353v-2.353H193.9zm30.597 23.53h-9.412V412.36h-2.353v-2.353h-9.411v2.353h4.706v2.353h-2.353v2.353h-2.353v-4.706h-2.353v23.53h2.353v2.352h21.176v-2.353h2.353v-4.705h-2.353zm32.978-18.824h-4.706v2.353h-2.353v16.47h-4.706v-16.47h-2.353v-2.353h-9.411v2.353h4.706v2.353h-2.353v2.353h-2.353v-4.706h-2.353v21.176h2.353v2.353h2.353v2.353h18.823v-2.353h2.353v-2.353h2.353v-21.176h-2.353zm32.969 2.353h-2.353v-2.353h-21.177v2.353h4.706v2.353h-2.353v2.353h-2.353v-4.706h-2.352v23.53h2.352v2.352h21.177v-2.353h2.353v-2.353h2.353v-9.411h-2.353v-2.353h2.353v-7.06h-2.353zm-4.706 16.47h-7.059v-2.352h7.059zm-7.059-9.411v-2.353h7.059v2.353z" style="fill:#4d4d4d" transform="translate(-18.594 -91.309) scale(.26458)"/>',
            '</svg>'
        );
        string memory expected = string.concat(
            'data:application/json;base64,',
            Base64.encode(
                bytes(string.concat(
                    '{',
                    '"name":"Optimizor Club"',
                    '"description":"The Optimizor Club NFT collection rewards gas efficient people and machines by minting new items whenever a cheaper solution is submitted for a certain challenge."',
                    '"image":", logo, "',
                    '"external_link":"https://optimizor.club/"',
                    '}'
                ))
            )
        );
        assertEq(opt.contractURI(), expected);
    }

    function testCheapSqrt() public {
        addSqrtChallenge();

        testChallenger(
            SQRT_ID,
            address(cheapSqrt),
            address(cheapSqrt).codehash
        );
    }

    function testExpensiveSqrt() public {
        addSqrtChallenge();

        testChallenger(
            SQRT_ID,
            address(expSqrt),
            address(expSqrt).codehash
        );
    }

    function testCheapExpensiveSqrt() public {
        addSqrtChallenge();

        testChallengers(
            SQRT_ID,
            address(expSqrt),
            address(expSqrt).codehash,
            address(cheapSqrt),
            address(cheapSqrt).codehash
        );
    }

    function testCheapSum() public {
        addSumChallenge();

        testChallenger(
            SUM_ID,
            address(cheapSum),
            address(cheapSum).codehash
        );
    }

    function testExpensiveSum() public {
        addSumChallenge();

        testChallenger(
            SUM_ID,
            address(expSum),
            address(expSum).codehash
        );
    }

    function testCheapExpensiveSum() public {
        addSumChallenge();

        testChallengers(
            SUM_ID,
            address(expSum),
            address(expSum).codehash,
            address(cheapSum),
            address(cheapSum).codehash
        );
    }

    function testCheapSqrtNFT() public {
        addSqrtChallenge();

        testChallenger(
            SQRT_ID,
            address(cheapSqrt),
            address(cheapSqrt).codehash
        );
    }

    function testChallengers(
        uint CHL_ID,
        address challenger_0,
        bytes32 chl_hash_0,
        address challenger_1,
        bytes32 chl_hash_1
    ) internal {
        address other = address(42);
        vm.prank(other);
        opt.commit(computeKey(other, chl_hash_0, SALT));
        vm.stopPrank();

        opt.commit(computeKey(address(this), chl_hash_1, SALT));

        advancePeriod();

        (, uint32 preLevel) = opt.challenges(CHL_ID);

        vm.prank(other);
        opt.challenge(CHL_ID, challenger_0, other, SALT);
        vm.stopPrank();

        (, uint32 postLevel) = opt.challenges(CHL_ID);
        (, address postOpt, ) = opt.extraDetails(packTokenId(CHL_ID, postLevel));
        assertEq(postOpt, other);
        assertEq(postLevel, preLevel + 1);

        uint tokenId = (CHL_ID << 32) | postLevel;
        assertEq(opt.ownerOf(tokenId), other);

        address[] memory leaders = opt.leaderboard(tokenId);
        assertEq(leaders.length, 1);
        assertEq(leaders[0], other);

        opt.challenge(CHL_ID, challenger_1, address(this), SALT);
        (, uint32 postLevel2) = opt.challenges(CHL_ID);
        (, address postOpt2, ) = opt.extraDetails(packTokenId(CHL_ID, postLevel2));
        assertEq(postOpt2, address(this));
        assertEq(postLevel2, postLevel + 1);

        uint tokenId2 = (CHL_ID << 32) | postLevel2;
        assertEq(opt.ownerOf(tokenId2), address(this));

        vm.prank(other);
        vm.expectRevert(abi.encodeWithSignature("NotOptimizor()"));
        opt.challenge(CHL_ID, challenger_0, other, SALT);
        vm.stopPrank();

        address[] memory leaders2 = opt.leaderboard(tokenId2);
        assertEq(leaders2.length, 2);
        assertEq(leaders2[0], other);
        assertEq(leaders2[1], address(this));
    }

    // TODO make this function public too to fuzz it
    function testChallenger(uint CHL_ID, address challenger, bytes32 chl_hash) internal {
        opt.commit(computeKey(address(this), chl_hash, SALT));
        advancePeriod();

        (, uint32 preLevel) = opt.challenges(CHL_ID);
        address[] memory preLeaders = opt.leaderboard((CHL_ID << 32) | preLevel);

        opt.challenge(CHL_ID, challenger, address(this), SALT);
        (, uint32 postLevel) = opt.challenges(CHL_ID);
        (, address postOpt, ) = opt.extraDetails(packTokenId(CHL_ID, postLevel));
        assertEq(postOpt, address(this));
        assertEq(postLevel, preLevel + 1);

        uint tokenId = (CHL_ID << 32) | postLevel;
        assertEq(opt.ownerOf(tokenId), address(this));

        address[] memory leaders = opt.leaderboard(tokenId);
        assertEq(leaders.length, preLeaders.length + 1);
        assertEq(leaders[leaders.length - 1], address(this));
    }

    function testInvalidTokenURIs() public {
        addSumChallenge();
        vm.expectRevert(abi.encodeWithSignature("InvalidLevel(uint256,uint32)", 0, 0));
        opt.tokenURI(0);
        vm.expectRevert(abi.encodeWithSignature("InvalidLevel(uint256,uint32)", 0, 10));
        opt.tokenURI(10);
    }

    function testInvalidChallengeTokenURIs() public {
        vm.expectRevert(abi.encodeWithSignature("ChallengeNotFound(uint256)", 100));
        opt.tokenURI((100 << 32) + 1);
    }

    function testTokenDetailsAndURIs() public {
        addSqrtChallenge();

        ISqrt expSqrt2 = new ExpensiveSqrt2();
        ISqrt expSqrt3 = new ExpensiveSqrt3();

        testChallenger(
            SQRT_ID,
            address(expSqrt3),
            address(expSqrt3).codehash
        );

        testChallenger(
            SQRT_ID,
            address(expSqrt2),
            address(expSqrt2).codehash
        );

        testChallenger(
            SQRT_ID,
            address(expSqrt),
            address(expSqrt).codehash
        );

        testChallenger(
            SQRT_ID,
            address(cheapSqrt),
            address(cheapSqrt).codehash
        );

        assertEq(abi.encode(opt.tokenDetails((SQRT_ID << 32) | 1)), abi.encode(TokenDetails({
            challengeId: SQRT_ID,
            challenge: IChallenge(0xf5a2fE45F4f1308502b1C136b9EF8af136141382),
            leaderGas: 134859,
            leaderLevel: 4,
            leaderSolver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
            leaderOwner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
            leaderSubmission: 0x1DD17af470f2CAa13D29c02AC190a3a1EdDc4e84,
            gas: 525933,
            level: 1,
            rank: 4,
            improvementPercentage: 0,
            solver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
            owner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
            submission: 0xdC0505A4c93647CD736E4bE24FBb171472bBFb10
        })));

        assertEq(abi.encode(opt.tokenDetails((SQRT_ID << 32) | 2)), abi.encode(TokenDetails({
            challengeId: SQRT_ID,
            challenge: IChallenge(0xf5a2fE45F4f1308502b1C136b9EF8af136141382),
            leaderGas: 134859,
            leaderLevel: 4,
            leaderSolver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
            leaderOwner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
            leaderSubmission: 0x1DD17af470f2CAa13D29c02AC190a3a1EdDc4e84,
            gas: 395575,
            level: 2,
            rank: 3,
            improvementPercentage: 75,
            solver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
            owner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
            submission: 0xbfFb01bB2DDb4EfA87cB78EeCB8115AFAe6d2032
        })));

        assertEq(abi.encode(opt.tokenDetails((SQRT_ID << 32) | 3)), abi.encode(TokenDetails({
            challengeId: SQRT_ID,
            challenge: IChallenge(0xf5a2fE45F4f1308502b1C136b9EF8af136141382),
            leaderGas: 134859,
            leaderLevel: 4,
            leaderSolver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
            leaderOwner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
            leaderSubmission: 0x1DD17af470f2CAa13D29c02AC190a3a1EdDc4e84,
            gas: 265217,
            level: 3,
            rank: 2,
            improvementPercentage: 67,
            solver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
            owner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
            submission: 0x3A1148FE01e3c4721D93fe8A36c2b5C29109B6ae
        })));

        assertEq(abi.encode(opt.tokenDetails((SQRT_ID << 32) | 4)), abi.encode(TokenDetails({
            challengeId: SQRT_ID,
            challenge: IChallenge(0xf5a2fE45F4f1308502b1C136b9EF8af136141382),
            leaderGas: 134859,
            leaderLevel: 4,
            leaderSolver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
            leaderOwner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
            leaderSubmission: 0x1DD17af470f2CAa13D29c02AC190a3a1EdDc4e84,
            gas: 134859,
            level: 4,
            rank: 1,
            improvementPercentage: 50,
            solver: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
            owner: 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84,
            submission: 0x1DD17af470f2CAa13D29c02AC190a3a1EdDc4e84
        })));

        assertEq(opt.tokenURI((SQRT_ID << 32) | 1), "data:application/json;base64,");
        assertEq(opt.tokenURI((SQRT_ID << 32) | 2), "data:application/json;base64,");
        assertEq(opt.tokenURI((SQRT_ID << 32) | 3), "data:application/json;base64,");
        assertEq(opt.tokenURI((SQRT_ID << 32) | 4), "data:application/json;base64,");
    }
}
